/*You are given an integer n and an integer k.

In one step you can do one of the following moves:

decrease n by 1;
divide n by k if n is divisible by k.
For example, if n=27 and k=3 you can do the following steps: 27→26→25→24→8→7→6→2→1→0.

You are asked to calculate the minimum number of steps to reach 0 from n.

Input
The first line contains one integer t (1≤t≤100) — the number of queries.

The only line of each query contains two integers n and k (1≤n≤1018, 2≤k≤1018).

Output
For each query print the minimum number of steps to reach 0 from n in single line.

Example
inputCopy
2
59 3
1000000000000000000 10
outputCopy
8
19
Note
Steps for the first test case are: 59→58→57→19→18→6→2→1→0.

In the second test case you have to divide n by k 18 times and then decrease n by 1.

*/


#include <bits/stdc++.h>
using namespace std;
 
int solve() {
    
 
    long long n,k,count=0;
    scanf("%lld%lld", &n, &k);
    while(n)
    {
        if(n%k!=0)
        {
            count+=n%k;
            n-=n%k;
        }
        else
        {
            n=n/k;
            count++;
        }
    }
    printf("%lld\n", count);
    
}
 
 
 
 
int main()
{
    //Input//freopen("input.txt", "r", stdin);
    //Output//freopen("output.txt", "w", stdout)
 
    int test = 1, tc = 0;
    scanf("%d", &test);
   // (void)getchar();
    //cin >> test;
    while (test--) {
        //printf("Case %d: ", ++tc);
        solve();
    }
 
    return 0;
}
