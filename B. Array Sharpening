/*
You're given an array a1,…,an of n non-negative integers.

Let's call it sharpened if and only if there exists an integer 1≤k≤n such that a1<a2<…<ak and ak>ak+1>…>an. In particular, any strictly increasing or strictly decreasing array is sharpened. For example:

The arrays [4], [0,1], [12,10,8] and [3,11,15,9,7,4] are sharpened;
The arrays [2,8,2,8,6,5], [0,1,1,0] and [2,5,6,9,8,8] are not sharpened.
You can do the following operation as many times as you want: choose any strictly positive element of the array, and decrease it by one. Formally, you can choose any i (1≤i≤n) such that ai>0 and assign ai:=ai−1.

Tell if it's possible to make the given array sharpened using some number (possibly zero) of these operations.

Input
The input consists of multiple test cases. The first line contains a single integer t (1≤t≤15 000)  — the number of test cases. The description of the test cases follows.

The first line of each test case contains a single integer n (1≤n≤3⋅105).

The second line of each test case contains a sequence of n non-negative integers a1,…,an (0≤ai≤109).

It is guaranteed that the sum of n over all test cases does not exceed 3⋅105.

Output
For each test case, output a single line containing "Yes" (without quotes) if it's possible to make the given array sharpened using the described operations, or "No" (without quotes) otherwise.

Example
inputCopy
10
1
248618
3
12 10 8
6
100 11 15 9 7 8
4
0 1 1 0
2
0 0
2
0 1
2
1 0
2
1 1
3
0 1 0
3
1 0 1
outputCopy
Yes
Yes
Yes
No
No
Yes
Yes
Yes
Yes
No
*/


/*
Author: Fuadul Hasan(fuadul202@gmail.com)
BSMRSTU,Gopalganj
*/
#include <set>
#include <map>
#include <list>
#include <queue>
#include <ctime>
#include <deque>
#include <stack>
#include <cmath>
#include <queue>
#include <bitset>
#include <vector>
#include <cstdio>
#include <string>
#include <chrono>
#include <random>
#include <cassert>
#include <complex>
#include <cstdlib>
#include <numeric>
#include <sstream>
#include <fstream>
#include <climits>
#include <stdio.h>
#include <cstring>
#include <iterator>
#include <iostream>
#include <algorithm>
#include <unordered_set>
#include <unordered_map>
//#include<bits/stdc++.h>
using namespace std;
 
int         cinn()              {int x; scanf("%d", &x); return x;}
long long   cinl()              {long long x; scanf("%lld", &x); return x;}
double      cind()              {double x; scanf("%lf", &x); return x;}
void        coutt(int x)        {printf("%d ", x);}

#define  gcd(a,b)               __gcd(a,b)
#define  lcm(a,b)               (a*b)/gcd(a,b)
#define  PI                     acos(-1.0)
#define  vi                     std::vector<int>
#define  vll                    std::vector<ll>
#define  vit                    vector<int> :: iterator
#define  st                    	set<int> :: iterator
#define  mpsi                   std::map<string, int>
#define  pb                     push_back
#define  ll                     long long int
#define  ld                     long double
#define  ull                    unsigned long long int
#define  min3(a,b,c)            min(a,min(b,c))
#define  min4(a,b,c,d)          min(d,min(a,min(b,c)))
#define  max3(a,b,c)            max(a,max(b,c))
#define  max4(a,b,c,d)          max(d,max(a,max(b,c)))
#define  nl                     printf("\n");
#define  no                     printf("No");
#define  yes                    printf("Yes");
#define  F                      first
#define  S                      second
#define  happy					cin.tie(0);
#define  coding					ios::sync_with_stdio(false);

/*..........error........*/
#define error(args...) {vector<string>_v=split(#args,',');err(_v.begin(),args);cout<<endl;}
vector<string> split(const string &s,char c) {vector<string>v;
stringstream ss(s);
string x;
while(getline(ss,x,c))
v.emplace_back(x);return move(v);}
void err(vector<string>::iterator it) {}
template<typename T,typename... Args>
void err(vector<string>::iterator it,T a,Args...args) {
cout<<it->substr((*it)[0]==' ',it->length())<< " = " << a << " ";
err(++it,args...);}
/*.........error...........*/

typedef pair<int,int> ii;
typedef std::vector<ii> vii;
 
const int mod           = 1e9 + 7;
const int inf           = (int)2e9 + 5;
const ll  Inf           = (ll)1e18 + 5;
const int N             = 1e7 + 5;
const int nn           = 3e5 + 5;

int a[nn];
int t[nn];
  

int solve()
{
	//happy coding
	
	int n = cinn();
	int a[n+1];
	for(int i=0;i<n;i++){
		cin>>a[i];
	}
	if(n==1){
		cout<<"Yes"<<endl;
		return 0;
	} else if(n==2){
		if(a[0]==0&&a[1]==0){
			cout<<"No"<<endl;
			return 0;
		}else {
			cout<<"Yes"<<endl;
		}
	}else{
		int mid,x;
		if(n%2==0){
			mid = max(a[n/2],a[(n/2)-1]);
			if(mid  == a[n/2]){
				x = n/2;
			} else {
				x = (n/2)-1;
			}
		} else {
			mid = a[n/2];
			x = n/2;
		}
		if(mid<x){
			cout<<"No"<<endl;
			return 0;
		}
		int i = x,j = x;
		int man = x;
		while(i>=0||j<=n-1){
			if(i>=0){
				if(a[i]>=i){
					i--;
				}else {
					cout<<"No"<<endl;
					return 0;
				}
			}
			if(j<=n-1){
				if(a[j]>= n-1-j){
					j++;
				} else {
					cout<<"No"<<endl;
					return 0;
				}
			}
		}
		cout<<"Yes"<<endl;
		return 0;
	}


	//error();
	return 0;
}

int main()
{
    int test = 1, tc = 0;
    scanf("%d", &test);
    //(void)getchar();
    //cin >> test;
    while (test--) {
        //printf("Case %d: ", ++tc);
        solve();
    }
 
    return 0;
}
/*
10 
0 1 2 3 4 0 4 2 1 0
*/
