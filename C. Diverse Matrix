/*Let a be a matrix of size r×c containing positive integers, not necessarily distinct. Rows of the matrix are numbered from 1 to r, columns are numbered from 1 to c. We can construct an array b consisting of r+c integers as follows: for each i∈[1,r], let bi be the greatest common divisor of integers in the i-th row, and for each j∈[1,c] let br+j be the greatest common divisor of integers in the j-th column.

We call the matrix diverse if all r+c numbers bk (k∈[1,r+c]) are pairwise distinct.

The magnitude of a matrix equals to the maximum of bk.

For example, suppose we have the following matrix:

(249144784)
We construct the array b:

b1 is the greatest common divisor of 2, 9, and 7, that is 1;
b2 is the greatest common divisor of 4, 144, and 84, that is 4;
b3 is the greatest common divisor of 2 and 4, that is 2;
b4 is the greatest common divisor of 9 and 144, that is 9;
b5 is the greatest common divisor of 7 and 84, that is 7.
So b=[1,4,2,9,7]. All values in this array are distinct, so the matrix is diverse. The magnitude is equal to 9.

For a given r and c, find a diverse matrix that minimises the magnitude. If there are multiple solutions, you may output any of them. If there are no solutions, output a single integer 0.

Input
The only line in the input contains two space separated integers r and c (1≤r,c≤500) — the number of rows and the number of columns of the matrix to be found.

Output
If there is no solution, output a single integer 0.

Otherwise, output r rows. The i-th of them should contain c space-separated integers, the j-th of which is ai,j — the positive integer in the i-th row and j-th column of a diverse matrix minimizing the magnitude.

Furthermore, it must hold that 1≤ai,j≤109. It can be shown that if a solution exists, there is also a solution with this additional constraint (still having minimum possible magnitude).

Examples
inputCopy
2 2
outputCopy
4 12
2 9
inputCopy
1 1
outputCopy
0
Note
In the first example, the GCDs of rows are b1=4 and b2=1, and the GCDs of columns are b3=2 and b4=3. All GCDs are pairwise distinct and the maximum of them is 4. Since the GCDs have to be distinct and at least 1, it is clear that there are no diverse matrices of size 2×2 with magnitude smaller than 4.

In the second example, no matter what a1,1 is, b1=b2 will always hold, so there are no diverse matrices.

*/

#include<bits/stdc++.h>
using namespace std;



int sc1() {int x; scanf("%d", &x); return x;}
long long sc2() {long long x; scanf("%lld", &x); return x;}

void out(int x) { printf("%d", x);}
void outnl(int x) { printf("%d\n", x);}
void outsps(int x){printf("%d ", x);}

#define  gcd(a,b)         __gcd(a,b)
#define  lcm(a,b)         (a*b)/gcd(a,b)
#define  gcd3(a,b,c)         __gcd(c,__gcd(a,b))
#define  Int              sc1()
#define  LL               sc2()
#define  For(n)           for(int i=0;i<n;i++)
#define  Forj(n)          for(int j=0;j<n;j++)
#define  Fork(n)          for(int k=0;k<n;k++)
#define  For1(n)          for(int i=1;i<=n;i++)
#define  ll               long long
#define  vi               std::vector<int>
#define  vll              std::vector<ll>
#define  qui              qu
#define  pb               push_back
#define  mpsi             std::map<string, int>
#define  nl               printf("\n");

const int mod           = 1e9 + 7;
const int inf           = (int)2e9 + 5;
const ll  Inf           = (ll)1e18 + 5;
const int N             = 2e6 + 5;

inline int add(int a, int b) {a += b; return a >= mod ? a - mod : a;}
inline int sub(int a, int b) {a -= b; return a < 0 ? a + mod : a;}
inline int mul(int a, int b) {return (ll)a * b % mod;}


 int vis[N];

 int a[N],b[N];

int solve() {

    int a,b;
    cin>>a>>b;
    if(a==1&&b==1) {
        cout<<0<<endl;
        return 0;
    }
    else if(a ==1 && b!=1)
    {
        for(int i=1; i<=b;i++)
        {
            cout<<i+1<<endl;
        }
        return 0;
    }
    else if(a!=1&&b==1)
    {
        for(int i=1; i<=a; i++)
        {

            cout<<1+i<<endl;
        }
        return 0;
    }
    //int x = a+1;
    for(int i=1; i<=a; i++)
    {
        int x = (a+1)*i;
        for(int j=1,z=1;j<=b; j++,z=z+i)
        {
            cout<<x+z-1<<" ";
        }
        cout<<endl;
    }

    return 0;
}




int main()
{
    //freopen("input.txt", "r", stdin);
    //freopen("output.txt", "w", stdout);

    int test = 1, tc = 0;
    //scanf("%d", &test);
    //cin >> test;
    while (test--) {
        //printf("Case %d: ", ++tc);
        solve();
    }

    return 0;




}
